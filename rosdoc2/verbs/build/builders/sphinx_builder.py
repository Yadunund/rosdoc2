# Copyright 2020 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import os
import sys

from ..builder import Builder
from ..create_format_map_from_package import create_format_map_from_package

logger = logging.getLogger('rosdoc2')

default_conf_py_template = """\
# This file was autogenerated by rosdoc2.

# Sphinx extensions.
extensions = [
    'breathe',
    'exhale',
    'sphinx.ext.autodoc',
    # 'sphinx.ext.doctest',
    # 'sphinx.ext.imgmath',
    'sphinx.ext.intersphinx',
]

breathe_projects = {{
    "{package.name} Doxygen Project": "generated/doxygen/xml",
}}
breathe_default_project = "{package.name} Doxygen Project"

# Setup the exhale extension.
exhale_args = {{
    # These arguments are required.
    "containmentFolder": "./api",
    "rootFileName": "library_root.rst",
    "rootFileTitle": "Library API",
    "doxygenStripFromPath": "..",
    # Suggested optional arguments.
    "createTreeView": True,
    # TIP: if using the sphinx-bootstrap-theme, you need
    # "treeViewIsBootstrap": True,
    "exhaleExecutesDoxygen": False,
    "exhaleUseDoxyfile": True,
#    "exhaleDoxygenStdin": \"""\\
#INPUT = {doxygen_input_files}
#GENERATE_HTML = YES{doxygen_tag_file_entries}
#GENERATE_TAGFILE = "generated/doxygen/{package.name}.tag"
#FILE_PATTERNS = *.hpp *.h *.cpp *.c *.cc
#\""",
}}

# The master toctree document.
master_doc = 'main'

# General information about the project.
project = u'{package.name}'
# TODO(tfoote) The docs say year and author but we have this and it seems more relevant.
copyright = u'{package_licenses}'

version = '{package_version_short}'
release = '{package.version}'

# Output file base name for HTML help builder.
htmlhelp_basename = '{package.name}'

# Intersphinx mapping.
intersphinx_mapping = {{
    'http://docs.python.org/': None,{sphinx_intersphinx_mappings}
}}

autoclass_content = "both"
"""

main_rst_template = """\
{package.name}
{package_underline}

{package.description}


Doxygen Content
===============

:doc:`api/library_root`

:doc:`source/{package.name}`


Sphinx Subprojects
==================

:doc:`source/index`


Indices and Search
==================

* :ref:`genindex`
* :ref:`search`

"""


class SphinxBuilder(Builder):
    """
    Builder for Sphinx.

    Supported keys for the builder_entry_dictionary include:

    - name (str) (required)
      - name of the documentation, used in reference to the content generated by this builder
    - builder (str) (required)
      - required for all builders, must be 'sphinx' to use this class
    - sphinx_sourcedir (str) (optional)
      - directory containing the Sphinx project, i.e. the `conf.py`, the setting
        you would pass to sphinx-build as SOURCEDIR. Defaults to `doc`.
    """
    def __init__(self, builder_entry_dictionary, output_dir, build_context):
        super(SphinxBuilder, self).__init__(
            builder_entry_dictionary,
            output_dir,
            build_context)

        assert self.builder_type == 'sphinx'

        self.sphinx_sourcedir = None
        configuration_file_path = build_context.configuration_file_path
        configuration_file_dir = os.path.dirname(configuration_file_path)

        # Process keys.
        for key, value in builder_entry_dictionary.items():
            if key in ['name', 'builder']:
                continue
            if key == 'sphinx_sourcedir':
                sphinx_sourcedir = os.path.join(configuration_file_dir, value)
                if not os.path.exists(sphinx_sourcedir):
                    raise RuntimeError(
                        f"Error Sphinx SOURCEDIR '{value}' does not exist relative "
                        f"to '{configuration_file_path}'")
                self.sphinx_sourcedir = sphinx_sourcedir
            elif key == 'doxygen_xml_directory':
                pass     
            else:
                raise RuntimeError(f"Error the Doxygen builder does not support key '{key}'")

        # Prepare the template variables for formatting strings.
        self.template_variables = create_format_map_from_package(build_context.package)

    def build(self, *, doc_build_folder):
        # If the user does not supply a Sphinx sourcedir, check the default.
        if self.sphinx_sourcedir is None:
            configuration_file_dir = os.path.dirname(self.build_context.configuration_file_path)
            default_dir = os.path.exists(os.path.join(configuration_file_dir, 'doc'))
            if not os.path.exists(default_dir):
                logger.info(
                    f"Note: no sourcedir provided and the default '{default_dir}' does not "
                    f"exist, using default Sphinx configuration.",
                    file=sys.stdout)
                self.sphinx_sourcedir = os.path.join(self.output_dir, 'default_sphinx_project')

    def generate_default_project_into_directory(self, directory):
        pass
