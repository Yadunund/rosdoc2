# Copyright 2020 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os

from ..builder import Builder
from ..create_format_map_from_package import create_format_map_from_package

DEFAULT_DOXYFILE = """\
## Generated by the rosdoc2.verbs.build.builders.DoxygenBuilder class.

PROJECT_NAME           = {package_name}
PROJECT_NUMBER         = {package_version}
PROJECT_BRIEF          = "{package_description}"

INPUT                  = {package_directory}/include
RECURSIVE              = YES

GENERATE_LATEX         = NO

MACRO_EXPANSION        = YES
EXPAND_ONLY_PREDEF     = YES
"""

EXTENDED_DOXYFILE = """\
## Generated by the rosdoc2.verbs.build.builders.DoxygenBuilder class.

## Include the user defined, or default if none specified, Doxyfile.
@INCLUDE = {config_file_name}

## Add extra doxyfile statements given by the user.
{extra_doxyfile_statements}

## Add rosdoc2 doxyfile statements for tag files, output directory, etc.
{rosdoc2_doxy_file_statements}
"""


class DoxygenBuilder(Builder):
    """
    Builder for Doxygen.

    Supported keys for the builder_entry_dictionary include:

    - name (str) (optional)
      - name of the documentation, used in reference to the content generated by this builder
    - builder (str) (required)
      - required for all builders, must be 'doxygen' to use this class
    - doxyfile (str) (optional)
      - relative path, from the config file, to a Doxyfile to be used instead of the default
    - extra_doxyfile_statements (list[str]) (optional)
      - extra doxyfile statements which would be added after the default, or user, doxyfile
    """
    def __init__(self, builder_entry_dictionary, output_dir, build_context):
        super(DoxygenBuilder, self).__init__(
            builder_entry_dictionary,
            output_dir,
            build_context)

        assert self.builder_type == 'doxygen'

        self.doxyfile = None
        self.extra_doxyfile_statements = []
        configuration_file_path = build_context.configuration_file_path

        # Process keys.
        for key, value in builder_entry_dictionary.items():
            if key in ['name', 'builder']:
                continue
            if key == 'doxyfile':
                config_file_dir = os.path.dirname(configuration_file_path)
                doxyfile = os.path.join(config_file_dir, value)
                if not os.path.exists(doxyfile):
                    raise RuntimeError(
                        f"Error Doxyfile '{value}' does not exist relative "
                        f"to '{configuration_file_path}'")
                self.doxyfile = doxyfile
            elif key == 'extra_doxyfile_statements':
                if not isinstance(value, list):
                    raise RuntimeError(
                        f"Error processing file '{configuration_file_path}', expected setting "
                        f"'extra_doxyfile_statements' to be a list of strings, "
                        f"found '{type(value)}' instead.")
                for statement in value:
                    if not isinstance(statement, str):
                        raise RuntimeError(
                            f"Error processing file '{configuration_file_path}', expected setting "
                            f"'extra_doxyfile_statements' to be a list of strings, "
                            f"found list with type '{type(statement)}' instead.")
                    self.extra_doxyfile_statements.append(statement)
            else:
                raise RuntimeError(f"Error the Doxygen builder does not support key '{key}'")

        # Prepare the template variables for formatting strings.
        self.template_variables = create_format_map_from_package(build_context.package)

        # If the user does not supply a Doxygen file, create a default.
        if self.doxyfile is None:
            doxyfile_content = DEFAULT_DOXYFILE.format_map(self.template_variables)
